// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rendszerfejlesztes.proto

#ifndef PROTOBUF_rendszerfejlesztes_2eproto__INCLUDED
#define PROTOBUF_rendszerfejlesztes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rendszerfejlesztes_2eproto();
void protobuf_AssignDesc_rendszerfejlesztes_2eproto();
void protobuf_ShutdownFile_rendszerfejlesztes_2eproto();

class AuthRequest;
class AuthResponse;
class Megallo;
class MegalloLista;

// ===================================================================

class AuthRequest : public ::google::protobuf::Message {
 public:
  AuthRequest();
  virtual ~AuthRequest();
  
  AuthRequest(const AuthRequest& from);
  
  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRequest& default_instance();
  
  void Swap(AuthRequest* other);
  
  // implements Message ----------------------------------------------
  
  AuthRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthRequest& from);
  void MergeFrom(const AuthRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:protocol.AuthRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_AssignDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_ShutdownFile_rendszerfejlesztes_2eproto();
  
  void InitAsDefaultInstance();
  static AuthRequest* default_instance_;
};
// -------------------------------------------------------------------

class AuthResponse : public ::google::protobuf::Message {
 public:
  AuthResponse();
  virtual ~AuthResponse();
  
  AuthResponse(const AuthResponse& from);
  
  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResponse& default_instance();
  
  void Swap(AuthResponse* other);
  
  // implements Message ----------------------------------------------
  
  AuthResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // @@protoc_insertion_point(class_scope:protocol.AuthResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_AssignDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_ShutdownFile_rendszerfejlesztes_2eproto();
  
  void InitAsDefaultInstance();
  static AuthResponse* default_instance_;
};
// -------------------------------------------------------------------

class Megallo : public ::google::protobuf::Message {
 public:
  Megallo();
  virtual ~Megallo();
  
  Megallo(const Megallo& from);
  
  inline Megallo& operator=(const Megallo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Megallo& default_instance();
  
  void Swap(Megallo* other);
  
  // implements Message ----------------------------------------------
  
  Megallo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Megallo& from);
  void MergeFrom(const Megallo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string nev = 1;
  inline bool has_nev() const;
  inline void clear_nev();
  static const int kNevFieldNumber = 1;
  inline const ::std::string& nev() const;
  inline void set_nev(const ::std::string& value);
  inline void set_nev(const char* value);
  inline void set_nev(const char* value, size_t size);
  inline ::std::string* mutable_nev();
  inline ::std::string* release_nev();
  
  // @@protoc_insertion_point(class_scope:protocol.Megallo)
 private:
  inline void set_has_nev();
  inline void clear_has_nev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* nev_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_AssignDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_ShutdownFile_rendszerfejlesztes_2eproto();
  
  void InitAsDefaultInstance();
  static Megallo* default_instance_;
};
// -------------------------------------------------------------------

class MegalloLista : public ::google::protobuf::Message {
 public:
  MegalloLista();
  virtual ~MegalloLista();
  
  MegalloLista(const MegalloLista& from);
  
  inline MegalloLista& operator=(const MegalloLista& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MegalloLista& default_instance();
  
  void Swap(MegalloLista* other);
  
  // implements Message ----------------------------------------------
  
  MegalloLista* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MegalloLista& from);
  void MergeFrom(const MegalloLista& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocol.Megallo megallok = 1;
  inline int megallok_size() const;
  inline void clear_megallok();
  static const int kMegallokFieldNumber = 1;
  inline const ::protocol::Megallo& megallok(int index) const;
  inline ::protocol::Megallo* mutable_megallok(int index);
  inline ::protocol::Megallo* add_megallok();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::Megallo >&
      megallok() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::Megallo >*
      mutable_megallok();
  
  // @@protoc_insertion_point(class_scope:protocol.MegalloLista)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocol::Megallo > megallok_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_AssignDesc_rendszerfejlesztes_2eproto();
  friend void protobuf_ShutdownFile_rendszerfejlesztes_2eproto();
  
  void InitAsDefaultInstance();
  static MegalloLista* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthRequest

// required string username = 1;
inline bool AuthRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AuthRequest::username() const {
  return *username_;
}
inline void AuthRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AuthRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AuthRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* AuthRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool AuthRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AuthRequest::password() const {
  return *password_;
}
inline void AuthRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AuthRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AuthRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AuthRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AuthResponse

// required string status = 1;
inline bool AuthResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthResponse::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& AuthResponse::status() const {
  return *status_;
}
inline void AuthResponse::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void AuthResponse::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void AuthResponse::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthResponse::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* AuthResponse::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Megallo

// required string nev = 1;
inline bool Megallo::has_nev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Megallo::set_has_nev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Megallo::clear_has_nev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Megallo::clear_nev() {
  if (nev_ != &::google::protobuf::internal::kEmptyString) {
    nev_->clear();
  }
  clear_has_nev();
}
inline const ::std::string& Megallo::nev() const {
  return *nev_;
}
inline void Megallo::set_nev(const ::std::string& value) {
  set_has_nev();
  if (nev_ == &::google::protobuf::internal::kEmptyString) {
    nev_ = new ::std::string;
  }
  nev_->assign(value);
}
inline void Megallo::set_nev(const char* value) {
  set_has_nev();
  if (nev_ == &::google::protobuf::internal::kEmptyString) {
    nev_ = new ::std::string;
  }
  nev_->assign(value);
}
inline void Megallo::set_nev(const char* value, size_t size) {
  set_has_nev();
  if (nev_ == &::google::protobuf::internal::kEmptyString) {
    nev_ = new ::std::string;
  }
  nev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Megallo::mutable_nev() {
  set_has_nev();
  if (nev_ == &::google::protobuf::internal::kEmptyString) {
    nev_ = new ::std::string;
  }
  return nev_;
}
inline ::std::string* Megallo::release_nev() {
  clear_has_nev();
  if (nev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nev_;
    nev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MegalloLista

// repeated .protocol.Megallo megallok = 1;
inline int MegalloLista::megallok_size() const {
  return megallok_.size();
}
inline void MegalloLista::clear_megallok() {
  megallok_.Clear();
}
inline const ::protocol::Megallo& MegalloLista::megallok(int index) const {
  return megallok_.Get(index);
}
inline ::protocol::Megallo* MegalloLista::mutable_megallok(int index) {
  return megallok_.Mutable(index);
}
inline ::protocol::Megallo* MegalloLista::add_megallok() {
  return megallok_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Megallo >&
MegalloLista::megallok() const {
  return megallok_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Megallo >*
MegalloLista::mutable_megallok() {
  return &megallok_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rendszerfejlesztes_2eproto__INCLUDED
